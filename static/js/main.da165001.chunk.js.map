{"version":3,"sources":["reducers/todos.js","actions/index.js","reducers/visiblityFilter.js","reducers/index.js","components/Link.js","containers/FilterLink.js","components/Footer.js","containers/AddTodo.js","components/Todo.js","components/TodoList.js","containers/VisibleTodoList.js","components/App.js","registerServiceWorker.js","index.js"],"names":["todos","state","action","type","id","text","completed","map","todo","nextTodoId","VisiblityFilters","visiblityFilter","filter","combineReducers","Link","active","children","onClick","disabled","style","marginLeft","FilterLink","connect","ownProps","dispatch","Footer","AddTodo","input","onSubmit","e","preventDefault","value","trim","ref","node","Todo","textDecoration","TodoList","onTodoClick","index","getVisibleTodos","t","VisibleTodoList","toggleTodo","App","Boolean","window","location","hostname","match","store","createStore","todoApp","render","document","getElementById"],"mappings":"8KAsBeA,EAtBD,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIC,EAAW,uCACpC,OAAQA,EAAOC,MACb,IAAK,WACH,MAAM,GAAN,mBACKF,GADL,CAEE,CACEG,GAAIF,EAAOE,GACXC,KAAMH,EAAOG,KACbC,WAAW,KAGjB,IAAK,cACH,OAAOL,EAAMM,KAAI,SAAAC,GAAI,OAClBA,EAAKJ,KAAOF,EAAOE,GAApB,YAAC,eACOI,GADR,IACcF,WAAYE,EAAKF,YAC5BE,KAEP,QACE,OAAOP,IClBTQ,EAAa,EAkBJC,EACD,WADCA,EAEK,iBAFLA,EAGE,cCVAC,EATS,WAAgD,IAA/CV,EAA8C,uDAAtCS,EAA2BR,EAAW,uCACrE,OAAQA,EAAOC,MACb,IAAK,uBACH,OAAOD,EAAOU,OAChB,QACE,OAAOX,ICHEY,cAAgB,CAC7Bb,QACAW,oB,OCeaG,EAlBF,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,SAAUC,EAArB,EAAqBA,QAArB,OACX,wBACGA,QAASA,EACTC,SAAUH,EACVI,MAAO,CACHC,WAAY,OAJnB,SAOGJ,KCYUK,EALIC,aAdK,SAACrB,EAAOsB,GAC9B,MAAO,CACLR,OAAQQ,EAASX,SAAWX,EAAMU,oBAIX,SAACa,EAAUD,GACpC,MAAO,CACLN,QAAS,WACPO,EJLuC,CAC3CrB,KAAM,uBACNS,OIGgCW,EAASX,aAKxBU,CAGjBR,GCCaW,EAlBA,kBACb,sCAEG,IACD,cAAC,EAAD,CAAYb,OAAQF,EAApB,iBAGC,KACD,cAAC,EAAD,CAAYE,OAAQF,EAApB,oBAGC,KACD,cAAC,EAAD,CAAYE,OAAQF,EAApB,2BCZAgB,EAAU,YAAmB,IAC3BC,EADWH,EAAe,EAAfA,SAGf,OACE,8BACE,uBACEI,SAAW,SAAAC,GNRI,IAAAxB,GMSbwB,EAAEC,iBACGH,EAAMI,MAAMC,UAGjBR,GNbanB,EMaIsB,EAAMI,MNbD,CAC9B5B,KAAM,WACNC,GAAIK,IACJJ,UMWQsB,EAAMI,MAAQ,KAPlB,UAUE,uBACEE,IAAK,SAAAC,GACHP,EAAQO,KAGZ,wBAAQ/B,KAAK,SAAb,4BAUOuB,EAFfA,EAAUJ,cAAUI,GCbLS,EAhBF,SAAC,GAAD,IAAElB,EAAF,EAAEA,QAASX,EAAX,EAAWA,UAAWD,EAAtB,EAAsBA,KAAtB,OACX,oBACEY,QAASA,EACTE,MAAQ,CAACiB,eAAgB9B,EAAY,eAAiB,QAFxD,SAKGD,KCcUgC,EAnBE,SAAC,GAAD,IAAErC,EAAF,EAAEA,MAAOsC,EAAT,EAASA,YAAT,OACf,6BACGtC,EAAMO,KAAI,SAACC,EAAM+B,GAAP,OACT,cAAC,EAAD,2BAAsB/B,GAAtB,IAA4BS,QAAS,kBAAMqB,EAAYC,MAA5CA,SCHXC,EAAkB,SAACxC,EAAOY,GAC9B,OAAQA,GACN,IAAK,WACH,OAAOZ,EACT,IAAK,iBACH,OAAOA,EAAMY,QAAO,SAAA6B,GAAC,OAAIA,EAAEnC,aAC7B,IAAK,cACH,OAAON,EAAMY,QAAO,SAAA6B,GAAC,OAAKA,EAAEnC,eAuBnBoC,EALSpB,aAdA,SAAArB,GACtB,MAAO,CACLD,MAAOwC,EAAgBvC,EAAMD,MAAOC,EAAMU,qBAInB,SAAAa,GACzB,MAAO,CACLc,YAAa,SAAAlC,GACXoB,ETXoB,SAAApB,GAAE,MAAK,CAC/BD,KAAM,cACNC,MSSauC,CAAWvC,QAKFkB,CAGtBe,GCnBaO,EARH,kBACV,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCCgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCLN,IAAMC,EAAQC,YAAYC,GAE1BC,iBACE,cAAC,IAAD,CAAUH,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFI,SAASC,eAAe,W","file":"static/js/main.da165001.chunk.js","sourcesContent":["const todos = (state = [], action) => {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return [\n        ...state,\n        {\n          id: action.id,\n          text: action.text,\n          completed: false\n        }\n      ]\n    case 'TOGGLE_TODO':\n      return state.map(todo =>\n        (todo.id === action.id)\n          ? {...todo, completed: !todo.completed}\n          :todo\n      )\n    default:\n      return state\n  }\n}\n\nexport default todos;","let nextTodoId = 0\n\nexport const addTodo = text => ({\n  type: 'ADD_TODO',\n  id: nextTodoId++,\n  text\n})\n\nexport const setVisiblityFilter = filter => ({\n  type: 'SET_VISIBLITY_FILTER',\n  filter\n})\n\nexport const toggleTodo = id => ({\n  type: 'TOGGLE_TODO',\n  id\n})\n\nexport const VisiblityFilters = {\n  SHOW_ALL: 'SHOW_ALL',\n  SHOW_COMPLETED: 'SHOW_COMPLETED',\n  SHOW_ACTIVE: 'SHOW_ACTIVE'\n}","import { VisiblityFilters } from '../actions'\n\nconst visiblityFilter = (state = VisiblityFilters.SHOW_ALL, action) => {\n  switch (action.type) {\n    case 'SET_VISIBLITY_FILTER':\n      return action.filter\n    default:\n      return state\n  }\n}\n\nexport default visiblityFilter;","import { combineReducers } from 'redux'\nimport todos from './todos'\nimport visiblityFilter from './visiblityFilter'\n\nexport default combineReducers({\n  todos,\n  visiblityFilter\n})","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Link = ({ active, children, onClick }) => (\n  <button\n     onClick={onClick}\n     disabled={active}\n     style={{\n         marginLeft: '4px',\n     }}\n  >\n    {children}\n  </button>\n)\n\nLink.propTypes = {\n  active: PropTypes.bool.isRequired,\n  children: PropTypes.node.isRequired,\n  onClick: PropTypes.func.isRequired\n}\n\nexport default Link;","import { connect } from 'react-redux'\nimport { setVisiblityFilter } from '../actions'\nimport Link from '../components/Link'\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    active: ownProps.filter === state.visiblityFilter\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    onClick: () => {\n      dispatch(setVisiblityFilter(ownProps.filter))\n    }\n  }\n}\n\nconst FilterLink = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Link)\n\nexport default FilterLink;","import React from 'react'\nimport FilterLink from '../containers/FilterLink'\nimport { VisiblityFilters } from '../actions'\n\nconst Footer = () => (\n  <p>\n    Show:\n    {' '}\n    <FilterLink filter={VisiblityFilters.SHOW_ALL}>\n      All\n    </FilterLink>\n    {', '}\n    <FilterLink filter={VisiblityFilters.SHOW_ACTIVE}>\n      Active\n    </FilterLink>\n    {', '}\n    <FilterLink filter={VisiblityFilters.SHOW_COMPLETED}>\n      Completed\n    </FilterLink>\n  </p>\n)\n\nexport default Footer;","import React from 'react'\nimport { connect } from 'react-redux'\nimport { addTodo } from '../actions'\n\nlet AddTodo = ({ dispatch }) => {\n  let input\n\n  return (\n    <div>\n      <form\n        onSubmit={ e => {\n          e.preventDefault()\n          if (!input.value.trim()) {\n            return\n          }\n          dispatch(addTodo(input.value))\n          input.value = ''\n        }}\n      >\n        <input\n          ref={node => {\n            input = node\n          }}\n        />\n        <button type=\"submit\">\n          Add Todo\n        </button>\n      </form>\n    </div>\n  )\n}\n\nAddTodo = connect()(AddTodo)\n\nexport default AddTodo;","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Todo = ({onClick, completed, text}) => (\n  <li\n    onClick={onClick}\n    style={ {textDecoration: completed ? 'line-through' : 'none'\n    }}\n  >\n    {text}\n   </li>\n)\n\nTodo.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  completed: PropTypes.bool.isRequired,\n  text: PropTypes.string.isRequired\n}\n\nexport default Todo;","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Todo from './Todo'\n\nconst TodoList = ({todos, onTodoClick}) => (\n  <ul>\n    {todos.map((todo, index) => (\n      <Todo key={index} {...todo} onClick={() => onTodoClick(index)} />\n    ))}\n  </ul>\n)\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n      text: PropTypes.string.isRequired\n    }).isRequired\n  ).isRequired,\n  onTodoClick: PropTypes.func.isRequired\n}\n\nexport default TodoList;","import { connect } from 'react-redux'\nimport { toggleTodo } from '../actions'\nimport TodoList from '../components/TodoList'\n\nconst getVisibleTodos = (todos, filter) => {\n  switch (filter) {\n    case 'SHOW_ALL':\n      return todos\n    case 'SHOW_COMPLETED':\n      return todos.filter(t => t.completed)\n    case 'SHOW_ACTIVE':\n      return todos.filter(t => !t.completed)\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    todos: getVisibleTodos(state.todos, state.visiblityFilter)\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onTodoClick: id => {\n      dispatch(toggleTodo(id))\n    }\n  }\n}\n\nconst VisibleTodoList = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoList)\n\nexport default VisibleTodoList;","import React from 'react'\nimport Footer from './Footer'\nimport AddTodo from '../containers/AddTodo'\nimport VisibleTodoList from '../containers/VisibleTodoList'\n\nconst App = () => (\n  <div>\n    <AddTodo />\n    <VisibleTodoList />\n    <Footer />\n  </div>\n)\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport './index.css';\nimport todoApp from './reducers'\nimport App from './components/App';\n//eslint-disable-next-line\nimport registerServiceWorker from './registerServiceWorker';\n\nconst store = createStore(todoApp)\n\nrender (\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)"],"sourceRoot":""}